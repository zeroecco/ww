// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type AnchorProvider struct{ Client *capnp.Client }

// AnchorProvider_TypeID is the unique identifier for the type AnchorProvider.
const AnchorProvider_TypeID = 0xad913fba242f2fe2

func (c AnchorProvider) Ls(ctx context.Context, params func(AnchorProvider_ls_Params) error) (AnchorProvider_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorProvider_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorProvider_ls_Results_Future{Future: ans.Future()}, release
}
func (c AnchorProvider) Walk(ctx context.Context, params func(AnchorProvider_walk_Params) error) (AnchorProvider_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorProvider_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorProvider_walk_Results_Future{Future: ans.Future()}, release
}

func (c AnchorProvider) AddRef() AnchorProvider {
	return AnchorProvider{
		Client: c.Client.AddRef(),
	}
}

func (c AnchorProvider) Release() {
	c.Client.Release()
}

// A AnchorProvider_Server is a AnchorProvider with a local implementation.
type AnchorProvider_Server interface {
	Ls(context.Context, AnchorProvider_ls) error

	Walk(context.Context, AnchorProvider_walk) error
}

// AnchorProvider_NewServer creates a new Server from an implementation of AnchorProvider_Server.
func AnchorProvider_NewServer(s AnchorProvider_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AnchorProvider_Methods(nil, s), s, c, policy)
}

// AnchorProvider_ServerToClient creates a new Client from an implementation of AnchorProvider_Server.
// The caller is responsible for calling Release on the returned Client.
func AnchorProvider_ServerToClient(s AnchorProvider_Server, policy *server.Policy) AnchorProvider {
	return AnchorProvider{Client: capnp.NewClient(AnchorProvider_NewServer(s, policy))}
}

// AnchorProvider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AnchorProvider_Methods(methods []server.Method, s AnchorProvider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, AnchorProvider_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, AnchorProvider_walk{call})
		},
	})

	return methods
}

// AnchorProvider_ls holds the state for a server call to AnchorProvider.ls.
// See server.Call for documentation.
type AnchorProvider_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorProvider_ls) Args() AnchorProvider_ls_Params {
	return AnchorProvider_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorProvider_ls) AllocResults() (AnchorProvider_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{Struct: r}, err
}

// AnchorProvider_walk holds the state for a server call to AnchorProvider.walk.
// See server.Call for documentation.
type AnchorProvider_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorProvider_walk) Args() AnchorProvider_walk_Params {
	return AnchorProvider_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorProvider_walk) AllocResults() (AnchorProvider_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{Struct: r}, err
}

type AnchorProvider_ls_Params struct{ capnp.Struct }

// AnchorProvider_ls_Params_TypeID is the unique identifier for the type AnchorProvider_ls_Params.
const AnchorProvider_ls_Params_TypeID = 0xbd07b053a83055a2

func NewAnchorProvider_ls_Params(s *capnp.Segment) (AnchorProvider_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Params{st}, err
}

func NewRootAnchorProvider_ls_Params(s *capnp.Segment) (AnchorProvider_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Params{st}, err
}

func ReadRootAnchorProvider_ls_Params(msg *capnp.Message) (AnchorProvider_ls_Params, error) {
	root, err := msg.Root()
	return AnchorProvider_ls_Params{root.Struct()}, err
}

func (s AnchorProvider_ls_Params) String() string {
	str, _ := text.Marshal(0xbd07b053a83055a2, s.Struct)
	return str
}

func (s AnchorProvider_ls_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s AnchorProvider_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_ls_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s AnchorProvider_ls_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnchorProvider_ls_Params_List is a list of AnchorProvider_ls_Params.
type AnchorProvider_ls_Params_List struct{ capnp.List }

// NewAnchorProvider_ls_Params creates a new list of AnchorProvider_ls_Params.
func NewAnchorProvider_ls_Params_List(s *capnp.Segment, sz int32) (AnchorProvider_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_ls_Params_List{l}, err
}

func (s AnchorProvider_ls_Params_List) At(i int) AnchorProvider_ls_Params {
	return AnchorProvider_ls_Params{s.List.Struct(i)}
}

func (s AnchorProvider_ls_Params_List) Set(i int, v AnchorProvider_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xbd07b053a83055a2, s.List)
	return str
}

// AnchorProvider_ls_Params_Future is a wrapper for a AnchorProvider_ls_Params promised by a client call.
type AnchorProvider_ls_Params_Future struct{ *capnp.Future }

func (p AnchorProvider_ls_Params_Future) Struct() (AnchorProvider_ls_Params, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_ls_Params{s}, err
}

type AnchorProvider_ls_Results struct{ capnp.Struct }

// AnchorProvider_ls_Results_TypeID is the unique identifier for the type AnchorProvider_ls_Results.
const AnchorProvider_ls_Results_TypeID = 0xcfd196b055a5d417

func NewAnchorProvider_ls_Results(s *capnp.Segment) (AnchorProvider_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{st}, err
}

func NewRootAnchorProvider_ls_Results(s *capnp.Segment) (AnchorProvider_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{st}, err
}

func ReadRootAnchorProvider_ls_Results(msg *capnp.Message) (AnchorProvider_ls_Results, error) {
	root, err := msg.Root()
	return AnchorProvider_ls_Results{root.Struct()}, err
}

func (s AnchorProvider_ls_Results) String() string {
	str, _ := text.Marshal(0xcfd196b055a5d417, s.Struct)
	return str
}

func (s AnchorProvider_ls_Results) Anchors() (Anchor_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_List{List: p.List()}, err
}

func (s AnchorProvider_ls_Results) HasAnchors() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_ls_Results) SetAnchors(v Anchor_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated Anchor_List, preferring placement in s's segment.
func (s AnchorProvider_ls_Results) NewAnchors(n int32) (Anchor_List, error) {
	l, err := NewAnchor_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnchorProvider_ls_Results_List is a list of AnchorProvider_ls_Results.
type AnchorProvider_ls_Results_List struct{ capnp.List }

// NewAnchorProvider_ls_Results creates a new list of AnchorProvider_ls_Results.
func NewAnchorProvider_ls_Results_List(s *capnp.Segment, sz int32) (AnchorProvider_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_ls_Results_List{l}, err
}

func (s AnchorProvider_ls_Results_List) At(i int) AnchorProvider_ls_Results {
	return AnchorProvider_ls_Results{s.List.Struct(i)}
}

func (s AnchorProvider_ls_Results_List) Set(i int, v AnchorProvider_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xcfd196b055a5d417, s.List)
	return str
}

// AnchorProvider_ls_Results_Future is a wrapper for a AnchorProvider_ls_Results promised by a client call.
type AnchorProvider_ls_Results_Future struct{ *capnp.Future }

func (p AnchorProvider_ls_Results_Future) Struct() (AnchorProvider_ls_Results, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_ls_Results{s}, err
}

type AnchorProvider_walk_Params struct{ capnp.Struct }

// AnchorProvider_walk_Params_TypeID is the unique identifier for the type AnchorProvider_walk_Params.
const AnchorProvider_walk_Params_TypeID = 0x81c6e2db81680729

func NewAnchorProvider_walk_Params(s *capnp.Segment) (AnchorProvider_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Params{st}, err
}

func NewRootAnchorProvider_walk_Params(s *capnp.Segment) (AnchorProvider_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Params{st}, err
}

func ReadRootAnchorProvider_walk_Params(msg *capnp.Message) (AnchorProvider_walk_Params, error) {
	root, err := msg.Root()
	return AnchorProvider_walk_Params{root.Struct()}, err
}

func (s AnchorProvider_walk_Params) String() string {
	str, _ := text.Marshal(0x81c6e2db81680729, s.Struct)
	return str
}

func (s AnchorProvider_walk_Params) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s AnchorProvider_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_walk_Params) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s AnchorProvider_walk_Params) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnchorProvider_walk_Params_List is a list of AnchorProvider_walk_Params.
type AnchorProvider_walk_Params_List struct{ capnp.List }

// NewAnchorProvider_walk_Params creates a new list of AnchorProvider_walk_Params.
func NewAnchorProvider_walk_Params_List(s *capnp.Segment, sz int32) (AnchorProvider_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_walk_Params_List{l}, err
}

func (s AnchorProvider_walk_Params_List) At(i int) AnchorProvider_walk_Params {
	return AnchorProvider_walk_Params{s.List.Struct(i)}
}

func (s AnchorProvider_walk_Params_List) Set(i int, v AnchorProvider_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_walk_Params_List) String() string {
	str, _ := text.MarshalList(0x81c6e2db81680729, s.List)
	return str
}

// AnchorProvider_walk_Params_Future is a wrapper for a AnchorProvider_walk_Params promised by a client call.
type AnchorProvider_walk_Params_Future struct{ *capnp.Future }

func (p AnchorProvider_walk_Params_Future) Struct() (AnchorProvider_walk_Params, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_walk_Params{s}, err
}

type AnchorProvider_walk_Results struct{ capnp.Struct }

// AnchorProvider_walk_Results_TypeID is the unique identifier for the type AnchorProvider_walk_Results.
const AnchorProvider_walk_Results_TypeID = 0xba40f919d2a6c66e

func NewAnchorProvider_walk_Results(s *capnp.Segment) (AnchorProvider_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{st}, err
}

func NewRootAnchorProvider_walk_Results(s *capnp.Segment) (AnchorProvider_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{st}, err
}

func ReadRootAnchorProvider_walk_Results(msg *capnp.Message) (AnchorProvider_walk_Results, error) {
	root, err := msg.Root()
	return AnchorProvider_walk_Results{root.Struct()}, err
}

func (s AnchorProvider_walk_Results) String() string {
	str, _ := text.Marshal(0xba40f919d2a6c66e, s.Struct)
	return str
}

func (s AnchorProvider_walk_Results) Anchor() (Anchor, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor{Struct: p.Struct()}, err
}

func (s AnchorProvider_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_walk_Results) SetAnchor(v Anchor) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnchor sets the anchor field to a newly
// allocated Anchor struct, preferring placement in s's segment.
func (s AnchorProvider_walk_Results) NewAnchor() (Anchor, error) {
	ss, err := NewAnchor(s.Struct.Segment())
	if err != nil {
		return Anchor{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// AnchorProvider_walk_Results_List is a list of AnchorProvider_walk_Results.
type AnchorProvider_walk_Results_List struct{ capnp.List }

// NewAnchorProvider_walk_Results creates a new list of AnchorProvider_walk_Results.
func NewAnchorProvider_walk_Results_List(s *capnp.Segment, sz int32) (AnchorProvider_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_walk_Results_List{l}, err
}

func (s AnchorProvider_walk_Results_List) At(i int) AnchorProvider_walk_Results {
	return AnchorProvider_walk_Results{s.List.Struct(i)}
}

func (s AnchorProvider_walk_Results_List) Set(i int, v AnchorProvider_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xba40f919d2a6c66e, s.List)
	return str
}

// AnchorProvider_walk_Results_Future is a wrapper for a AnchorProvider_walk_Results promised by a client call.
type AnchorProvider_walk_Results_Future struct{ *capnp.Future }

func (p AnchorProvider_walk_Results_Future) Struct() (AnchorProvider_walk_Results, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_walk_Results{s}, err
}

func (p AnchorProvider_walk_Results_Future) Anchor() Anchor_Future {
	return Anchor_Future{Future: p.Future.Field(0, nil)}
}

type Anchor struct{ capnp.Struct }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func NewAnchor(s *capnp.Segment) (Anchor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor{st}, err
}

func NewRootAnchor(s *capnp.Segment) (Anchor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor{st}, err
}

func ReadRootAnchor(msg *capnp.Message) (Anchor, error) {
	root, err := msg.Root()
	return Anchor{root.Struct()}, err
}

func (s Anchor) String() string {
	str, _ := text.Marshal(0xbe89922d1c49d9c5, s.Struct)
	return str
}

func (s Anchor) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor) Container() Anchor_Container {
	p, _ := s.Struct.Ptr(1)
	return Anchor_Container{Client: p.Interface().Client()}
}

func (s Anchor) HasContainer() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor) SetContainer(v Anchor_Container) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_List is a list of Anchor.
type Anchor_List struct{ capnp.List }

// NewAnchor creates a new list of Anchor.
func NewAnchor_List(s *capnp.Segment, sz int32) (Anchor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Anchor_List{l}, err
}

func (s Anchor_List) At(i int) Anchor { return Anchor{s.List.Struct(i)} }

func (s Anchor_List) Set(i int, v Anchor) error { return s.List.SetStruct(i, v.Struct) }

func (s Anchor_List) String() string {
	str, _ := text.MarshalList(0xbe89922d1c49d9c5, s.List)
	return str
}

// Anchor_Future is a wrapper for a Anchor promised by a client call.
type Anchor_Future struct{ *capnp.Future }

func (p Anchor_Future) Struct() (Anchor, error) {
	s, err := p.Future.Struct()
	return Anchor{s}, err
}

func (p Anchor_Future) Container() Anchor_Container {
	return Anchor_Container{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_Container struct{ Client *capnp.Client }

// Anchor_Container_TypeID is the unique identifier for the type Anchor_Container.
const Anchor_Container_TypeID = 0xd7d0cd94ccdd8e42

func (c Anchor_Container) Set(ctx context.Context, params func(Anchor_Container_set_Params) error) (Anchor_Container_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd7d0cd94ccdd8e42,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Container",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Container_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_Container_set_Results_Future{Future: ans.Future()}, release
}
func (c Anchor_Container) Get(ctx context.Context, params func(Anchor_Container_get_Params) error) (Anchor_Container_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd7d0cd94ccdd8e42,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor.Container",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Container_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_Container_get_Results_Future{Future: ans.Future()}, release
}

func (c Anchor_Container) AddRef() Anchor_Container {
	return Anchor_Container{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor_Container) Release() {
	c.Client.Release()
}

// A Anchor_Container_Server is a Anchor_Container with a local implementation.
type Anchor_Container_Server interface {
	Set(context.Context, Anchor_Container_set) error

	Get(context.Context, Anchor_Container_get) error
}

// Anchor_Container_NewServer creates a new Server from an implementation of Anchor_Container_Server.
func Anchor_Container_NewServer(s Anchor_Container_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Container_Methods(nil, s), s, c, policy)
}

// Anchor_Container_ServerToClient creates a new Client from an implementation of Anchor_Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Container_ServerToClient(s Anchor_Container_Server, policy *server.Policy) Anchor_Container {
	return Anchor_Container{Client: capnp.NewClient(Anchor_Container_NewServer(s, policy))}
}

// Anchor_Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Container_Methods(methods []server.Method, s Anchor_Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd7d0cd94ccdd8e42,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor.Container",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Anchor_Container_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd7d0cd94ccdd8e42,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Anchor.Container",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Anchor_Container_get{call})
		},
	})

	return methods
}

// Anchor_Container_set holds the state for a server call to Anchor_Container.set.
// See server.Call for documentation.
type Anchor_Container_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Container_set) Args() Anchor_Container_set_Params {
	return Anchor_Container_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_Container_set) AllocResults() (Anchor_Container_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Container_set_Results{Struct: r}, err
}

// Anchor_Container_get holds the state for a server call to Anchor_Container.get.
// See server.Call for documentation.
type Anchor_Container_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Container_get) Args() Anchor_Container_get_Params {
	return Anchor_Container_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_Container_get) AllocResults() (Anchor_Container_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Container_get_Results{Struct: r}, err
}

type Anchor_Container_set_Params struct{ capnp.Struct }

// Anchor_Container_set_Params_TypeID is the unique identifier for the type Anchor_Container_set_Params.
const Anchor_Container_set_Params_TypeID = 0x99cd2eea5bcaaf5a

func NewAnchor_Container_set_Params(s *capnp.Segment) (Anchor_Container_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Container_set_Params{st}, err
}

func NewRootAnchor_Container_set_Params(s *capnp.Segment) (Anchor_Container_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Container_set_Params{st}, err
}

func ReadRootAnchor_Container_set_Params(msg *capnp.Message) (Anchor_Container_set_Params, error) {
	root, err := msg.Root()
	return Anchor_Container_set_Params{root.Struct()}, err
}

func (s Anchor_Container_set_Params) String() string {
	str, _ := text.Marshal(0x99cd2eea5bcaaf5a, s.Struct)
	return str
}

func (s Anchor_Container_set_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Anchor_Container_set_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Container_set_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Anchor_Container_set_Params_List is a list of Anchor_Container_set_Params.
type Anchor_Container_set_Params_List struct{ capnp.List }

// NewAnchor_Container_set_Params creates a new list of Anchor_Container_set_Params.
func NewAnchor_Container_set_Params_List(s *capnp.Segment, sz int32) (Anchor_Container_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_Container_set_Params_List{l}, err
}

func (s Anchor_Container_set_Params_List) At(i int) Anchor_Container_set_Params {
	return Anchor_Container_set_Params{s.List.Struct(i)}
}

func (s Anchor_Container_set_Params_List) Set(i int, v Anchor_Container_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Container_set_Params_List) String() string {
	str, _ := text.MarshalList(0x99cd2eea5bcaaf5a, s.List)
	return str
}

// Anchor_Container_set_Params_Future is a wrapper for a Anchor_Container_set_Params promised by a client call.
type Anchor_Container_set_Params_Future struct{ *capnp.Future }

func (p Anchor_Container_set_Params_Future) Struct() (Anchor_Container_set_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_Container_set_Params{s}, err
}

type Anchor_Container_set_Results struct{ capnp.Struct }

// Anchor_Container_set_Results_TypeID is the unique identifier for the type Anchor_Container_set_Results.
const Anchor_Container_set_Results_TypeID = 0x8c20aa60ea5037a3

func NewAnchor_Container_set_Results(s *capnp.Segment) (Anchor_Container_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Container_set_Results{st}, err
}

func NewRootAnchor_Container_set_Results(s *capnp.Segment) (Anchor_Container_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Container_set_Results{st}, err
}

func ReadRootAnchor_Container_set_Results(msg *capnp.Message) (Anchor_Container_set_Results, error) {
	root, err := msg.Root()
	return Anchor_Container_set_Results{root.Struct()}, err
}

func (s Anchor_Container_set_Results) String() string {
	str, _ := text.Marshal(0x8c20aa60ea5037a3, s.Struct)
	return str
}

// Anchor_Container_set_Results_List is a list of Anchor_Container_set_Results.
type Anchor_Container_set_Results_List struct{ capnp.List }

// NewAnchor_Container_set_Results creates a new list of Anchor_Container_set_Results.
func NewAnchor_Container_set_Results_List(s *capnp.Segment, sz int32) (Anchor_Container_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_Container_set_Results_List{l}, err
}

func (s Anchor_Container_set_Results_List) At(i int) Anchor_Container_set_Results {
	return Anchor_Container_set_Results{s.List.Struct(i)}
}

func (s Anchor_Container_set_Results_List) Set(i int, v Anchor_Container_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Container_set_Results_List) String() string {
	str, _ := text.MarshalList(0x8c20aa60ea5037a3, s.List)
	return str
}

// Anchor_Container_set_Results_Future is a wrapper for a Anchor_Container_set_Results promised by a client call.
type Anchor_Container_set_Results_Future struct{ *capnp.Future }

func (p Anchor_Container_set_Results_Future) Struct() (Anchor_Container_set_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_Container_set_Results{s}, err
}

type Anchor_Container_get_Params struct{ capnp.Struct }

// Anchor_Container_get_Params_TypeID is the unique identifier for the type Anchor_Container_get_Params.
const Anchor_Container_get_Params_TypeID = 0xf9ab4330477726ec

func NewAnchor_Container_get_Params(s *capnp.Segment) (Anchor_Container_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Container_get_Params{st}, err
}

func NewRootAnchor_Container_get_Params(s *capnp.Segment) (Anchor_Container_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Container_get_Params{st}, err
}

func ReadRootAnchor_Container_get_Params(msg *capnp.Message) (Anchor_Container_get_Params, error) {
	root, err := msg.Root()
	return Anchor_Container_get_Params{root.Struct()}, err
}

func (s Anchor_Container_get_Params) String() string {
	str, _ := text.Marshal(0xf9ab4330477726ec, s.Struct)
	return str
}

// Anchor_Container_get_Params_List is a list of Anchor_Container_get_Params.
type Anchor_Container_get_Params_List struct{ capnp.List }

// NewAnchor_Container_get_Params creates a new list of Anchor_Container_get_Params.
func NewAnchor_Container_get_Params_List(s *capnp.Segment, sz int32) (Anchor_Container_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_Container_get_Params_List{l}, err
}

func (s Anchor_Container_get_Params_List) At(i int) Anchor_Container_get_Params {
	return Anchor_Container_get_Params{s.List.Struct(i)}
}

func (s Anchor_Container_get_Params_List) Set(i int, v Anchor_Container_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Container_get_Params_List) String() string {
	str, _ := text.MarshalList(0xf9ab4330477726ec, s.List)
	return str
}

// Anchor_Container_get_Params_Future is a wrapper for a Anchor_Container_get_Params promised by a client call.
type Anchor_Container_get_Params_Future struct{ *capnp.Future }

func (p Anchor_Container_get_Params_Future) Struct() (Anchor_Container_get_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_Container_get_Params{s}, err
}

type Anchor_Container_get_Results struct{ capnp.Struct }

// Anchor_Container_get_Results_TypeID is the unique identifier for the type Anchor_Container_get_Results.
const Anchor_Container_get_Results_TypeID = 0xc09391084f16d7a6

func NewAnchor_Container_get_Results(s *capnp.Segment) (Anchor_Container_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Container_get_Results{st}, err
}

func NewRootAnchor_Container_get_Results(s *capnp.Segment) (Anchor_Container_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Container_get_Results{st}, err
}

func ReadRootAnchor_Container_get_Results(msg *capnp.Message) (Anchor_Container_get_Results, error) {
	root, err := msg.Root()
	return Anchor_Container_get_Results{root.Struct()}, err
}

func (s Anchor_Container_get_Results) String() string {
	str, _ := text.Marshal(0xc09391084f16d7a6, s.Struct)
	return str
}

func (s Anchor_Container_get_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Anchor_Container_get_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Container_get_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Anchor_Container_get_Results_List is a list of Anchor_Container_get_Results.
type Anchor_Container_get_Results_List struct{ capnp.List }

// NewAnchor_Container_get_Results creates a new list of Anchor_Container_get_Results.
func NewAnchor_Container_get_Results_List(s *capnp.Segment, sz int32) (Anchor_Container_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_Container_get_Results_List{l}, err
}

func (s Anchor_Container_get_Results_List) At(i int) Anchor_Container_get_Results {
	return Anchor_Container_get_Results{s.List.Struct(i)}
}

func (s Anchor_Container_get_Results_List) Set(i int, v Anchor_Container_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_Container_get_Results_List) String() string {
	str, _ := text.MarshalList(0xc09391084f16d7a6, s.List)
	return str
}

// Anchor_Container_get_Results_Future is a wrapper for a Anchor_Container_get_Results promised by a client call.
type Anchor_Container_get_Results_Future struct{ *capnp.Future }

func (p Anchor_Container_get_Results_Future) Struct() (Anchor_Container_get_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_Container_get_Results{s}, err
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x9cV]h\x1cU\x14>g\xee\xcc\xceF\x92" +
	"lnnjI5\xb4\xc4\x8d6\xd1n\xb3\xa4\xa2]" +
	"\x85]\xb7\x09I\x8a\xc1\x9dm#\x18_:$C\x13" +
	"\xb2\xddMg6\xe6)\x84\"%(R\x8cU\xc1\x82" +
	"\x05+\x0dmmh\xe9C!\x85\x14}hAi\xac" +
	"\x0dB\x88\"\xdab}\x08\xe2\x0f\xa8\xd8\x92\xbarg" +
	"rwn\xd7\xad\x0d}\xd9\xbd\xec\x9e\xf9\xcew\xbe\xf3" +
	"\x9ds\xa7uII(Q\xad3\x08`\xec\xd1\x02\x85" +
	"f}\xf0\xc0\xb77.\x1f\x00\xda\x80\x00\x1a\xea\x00m" +
	"\x15\xeaN\x04d\xeb\xd48`\xa1\xf6\xb9\xa3\x0b\x8f\xcd" +
	"\xbe\xfd:\xd0G\x10@\xe5\xffw\xa8i\x04\xb5p$" +
	"\xbc\xd2\xd7\xf6[\xc3\x9b@\xabI\xe1\xf4t\xd7\x8f\xc1" +
	"\xd3\x7f\xad\x00 \x8b\xaaG\xd8v\xf5\x09\x00\xd6\xa3N" +
	"\xb2\x0f\xf93\x85\x8f\x9fI-\xef9\xb5\xe9-\xa0\x1b" +
	"\x05\xccA\xb5\x8f\xc3\xcc\x1d=y\xfe\xcb}\xb3\x87\xbc" +
	"\x04\x1e\x83\xfd\x1e\x83q\x97A\xdf\x99/^]\x8e\xcc" +
	"\x7f\xe0=\xea\x05\xccp\x0a\xc8f\xdd\x80\x1b[\xb7\x86" +
	"/\xc4\xa7f\xfeCdI]f7y.v]\x9d" +
	"dQ\x8d\x13\xc9^\x9e^\xa8\xbf\x95\xb8 \x17\\\xaf" +
	"\xb9hM\x1aG;\xd6\xdbzb\xd7Y}N\x0e\xe8" +
	"\xd0b<\xa0\xc7\x0d\xb8\xb4\xd4\xfd\xe8\x96w\xde\xb8\x08" +
	"\xb4\x1a\xfdt\x9a\xc2\xf3\x8ck\xa7\xd8Am=\x00\x9b" +
	"\xd2\xc6\x00\x0b\xd3\x8b\x0f\xbf\x14\x9c:\xfc\xa9\xcc\xfdw" +
	"\xad\x8f\x83\xddq\xc16\x8d\xef:w1yu\x1e\x0c" +
	"\x86\x8a/\xa9\x1b\xc9\x1a\x02\x0b\xac9\xc0OM\x813" +
	"\x80\x85\xf5_\x1f\xef=\xfb\xfe\xb5\xab2\xb5\xb9@\x92" +
	"\xa3]\x0ap\xb4\xe4\xa1\xef\xae\xbc;\xff\xd5\"\xd0u" +
	"\xc4\xe7\x09\xc8\xfe\x0c\xdcf\xa8s\xa4;\x81I\xd6\xc3" +
	"O\x85\xcc\xe6'\xff\xde\xfdC\xf3\x12P&\xd0\xd8\xd3" +
	"\xfam@\xb6]\xe7`\xbf.n<\xdf~e\xe7M" +
	"N\xad\x98\xee\x15\xbd\x96\xa73u^\x1d[9\xd1Y" +
	"k~\xff\x93\x87\xe06uNWxS\xc9\xf3\xc7\xce" +
	"\xf5O\x1f\xfe\x05(#~U\x80\xec#\xfd\x1b6\xe3" +
	"\x129\xa9w\xb2k\xfc\xf4Ob\xdb\xe7\xbd\xc7\xdf\xfb" +
	"\xc3\xa7\xd16\xab?\xc4\xb3|\xe6\xf2\xf8\xf9\xf1\xb1\xce" +
	"\xd6\x1d\x9f\xdc\x92\xacs]O#\xb4\x16\xfa3\xa3N" +
	"\xde\xb2#j\xbf9\x92\x1d\x89\xbd\x90\xed\x1f\xcc\xd9)" +
	";\xf7\xda\xd0\x80eG\xc6\xcc\xccp8e\xda\xe6>" +
	"\x07\xc0P\x89\x0a\xa0\"\x00\xadj\x010\x82\x04\x8d\xb0" +
	"\x82\xa1\x113?\x88\xd5\x80)\x82X\x09\x0a?\x96\xc2" +
	"\xbe<d\x8dE\xba\xcc\xec@\xc6\xb2#\x83\xeew8" +
	"m9\xa3\x99<:\xc5X\x14\xb1\xc4\x1a3\x82\x88\x92" +
	"\x02\x15I\xbf\xcbT\x8bM\xacB\xc5\xd3V\x7f\xce\x1e" +
	"0\x82D\x93\x9a\x81BS\x1am\x01\x856\xe9\x88B" +
	"\x1f\xbf!\xb4>\x06\x0a\xad\xd2CCy\xcbN`<" +
	"\x93\xcb\x0d\x8f\x8e$0\x85X^\x93\xc8\x8e\\6o" +
	"\x0ee-;\xe2Xy\x8f=\xc9;k\xa9\xb4\x9c\x80" +
	"I_\xc0\x09\xdb\xad\xc2\x11\x1a\xd6\xf8\xb5\x02\x96S\xb3" +
	",!7\x09:\xe5\x9aT\xa7`h\xc0\xcc\x9bX\x05" +
	"\x0aVIxJi\xd3C\xbc\xeb)\xc4UE\xc5\x1c" +
	"\xa3\x98\x1a\x1a\xdd\xb0\xaahq\xeb\xa1\xd8\x06\xb4\xbe\xc5" +
	"U\x94d\x9c\x04\x86\xb8s\xfeG\xcd\xbb\x1d&\xac " +
	"\x93\x8f\xf9\xe4\xe3\xa6\xfb\x0c\xd6\xc8\xf3\x885R!\xa4" +
	",v\xc6\x09\xc7=\xed\x1f\xc4\xba(0C\x1c\xd4P" +
	"Q\xde\x0d\x98.\x08\xf9\x01m#X\x84o\xe6\xf0a" +
	"\x82F\xab\x82\x14\xb1\x8e\x8f=\xdd\x92\x060\x9e\"h" +
	"<+r\xf2d\x95<\x99\x0f\x82\xd4\xc7\x07D\xba\x86" +
	"\xbe\xef\x95\x8c\xf8 \x8dw\xcd\xea\xce\x10\x0e\xf0\xaeW" +
	"\x16!:8D\x82\xa0\xf1\xa2\x82\xa2\x8a\xeeF\x00\xa3" +
	"\x9d\xa0\x91R\x90*X\x87\x0a\x00\xed\xe1?v\x114" +
	"v\xf3\xd2,\xcb\x16\xa5\xe9\xf9|\x065PP\x03\xd4" +
	"\x1dk?V\x80\x82\x15p??d\x9cU78\xf7" +
	"\x1c\x17\xcf\x0d\xd2\xb8\xc8\xae\xa8\xbe\x97\xbd\xb9lqO" +
	"7\xdf\xe0\xe2^Dq\xb7\xd2h\xa30\xb8\xd8\x99(" +
	". Z\xdf\xe8\x1a\\w\xac|\x02\xf5\xbd\xfcS6" +
	"\xb8,*\xdf*\xe5\xcc\x97\xf4;3\xe1m\x07\xde\xf7" +
	"\xe2\xa2+\xe9;\x91\x10\xbd\x05\xe5\x8f\x8ad\xb9\x98o" +
	"\xb9\xa2\xe36\x00\x18\x9b\x09\x1a\xdb\x14\x8c{\xfb\xa5d" +
	"\xaf\xd4\x00\x92\xdc0\"(\x88R\xca@i\x11\xa2\x1b" +
	"\"\xa0t\xcd\x11OO\xd5\xd5S\xbc\x88\xa0x\xe5\xa1" +
	"\x94\xafYM\x8f{\xc5\xde-X\x99\xf2\xca\xadJy" +
	"\x13p\x87u\xb7\xfb\xe3\xb3\x86\x01Y]\x8c\xff\x06\x00" +
	"\x00\xff\xffN \xb0{"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x81c6e2db81680729,
		0x8390b923d29e3b12,
		0x8a1df0335afc249a,
		0x8c20aa60ea5037a3,
		0x8eb96dceb6a99ebd,
		0x99cd2eea5bcaaf5a,
		0xad913fba242f2fe2,
		0xba40f919d2a6c66e,
		0xbd07b053a83055a2,
		0xbe89922d1c49d9c5,
		0xc09391084f16d7a6,
		0xcdcf42beb2537d20,
		0xcfd196b055a5d417,
		0xd7d0cd94ccdd8e42,
		0xd929e054f82b286c,
		0xe54acc44b61fd7ef,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xf495a555c9344000,
		0xf9ab4330477726ec)
}
