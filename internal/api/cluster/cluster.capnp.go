// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Path(ctx context.Context, params func(Anchor_path_Params) error) (Anchor_path_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "path",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_path_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_path_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Path(context.Context, Anchor_path) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "path",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Path(ctx, Anchor_path{call})
		},
	})

	return methods
}

// Anchor_path holds the state for a server call to Anchor.path.
// See server.Call for documentation.
type Anchor_path struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_path) Args() Anchor_path_Params {
	return Anchor_path_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_path) AllocResults() (Anchor_path_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_path_Results{Struct: r}, err
}

type Anchor_path_Params struct{ capnp.Struct }

// Anchor_path_Params_TypeID is the unique identifier for the type Anchor_path_Params.
const Anchor_path_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_path_Params(s *capnp.Segment) (Anchor_path_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_path_Params{st}, err
}

func NewRootAnchor_path_Params(s *capnp.Segment) (Anchor_path_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_path_Params{st}, err
}

func ReadRootAnchor_path_Params(msg *capnp.Message) (Anchor_path_Params, error) {
	root, err := msg.Root()
	return Anchor_path_Params{root.Struct()}, err
}

func (s Anchor_path_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

// Anchor_path_Params_List is a list of Anchor_path_Params.
type Anchor_path_Params_List struct{ capnp.List }

// NewAnchor_path_Params creates a new list of Anchor_path_Params.
func NewAnchor_path_Params_List(s *capnp.Segment, sz int32) (Anchor_path_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_path_Params_List{l}, err
}

func (s Anchor_path_Params_List) At(i int) Anchor_path_Params {
	return Anchor_path_Params{s.List.Struct(i)}
}

func (s Anchor_path_Params_List) Set(i int, v Anchor_path_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_path_Params_List) String() string {
	str, _ := text.MarshalList(0xd377c9b486ad95d5, s.List)
	return str
}

// Anchor_path_Params_Future is a wrapper for a Anchor_path_Params promised by a client call.
type Anchor_path_Params_Future struct{ *capnp.Future }

func (p Anchor_path_Params_Future) Struct() (Anchor_path_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_path_Params{s}, err
}

type Anchor_path_Results struct{ capnp.Struct }

// Anchor_path_Results_TypeID is the unique identifier for the type Anchor_path_Results.
const Anchor_path_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_path_Results(s *capnp.Segment) (Anchor_path_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_path_Results{st}, err
}

func NewRootAnchor_path_Results(s *capnp.Segment) (Anchor_path_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_path_Results{st}, err
}

func ReadRootAnchor_path_Results(msg *capnp.Message) (Anchor_path_Results, error) {
	root, err := msg.Root()
	return Anchor_path_Results{root.Struct()}, err
}

func (s Anchor_path_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

func (s Anchor_path_Results) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_path_Results) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_path_Results) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_path_Results) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_path_Results_List is a list of Anchor_path_Results.
type Anchor_path_Results_List struct{ capnp.List }

// NewAnchor_path_Results creates a new list of Anchor_path_Results.
func NewAnchor_path_Results_List(s *capnp.Segment, sz int32) (Anchor_path_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Anchor_path_Results_List{l}, err
}

func (s Anchor_path_Results_List) At(i int) Anchor_path_Results {
	return Anchor_path_Results{s.List.Struct(i)}
}

func (s Anchor_path_Results_List) Set(i int, v Anchor_path_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_path_Results_List) String() string {
	str, _ := text.MarshalList(0xb0fd7286c7f13ef3, s.List)
	return str
}

// Anchor_path_Results_Future is a wrapper for a Anchor_path_Results promised by a client call.
type Anchor_path_Results_Future struct{ *capnp.Future }

func (p Anchor_path_Results_Future) Struct() (Anchor_path_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_path_Results{s}, err
}

type AnchorProvider struct{ Client *capnp.Client }

// AnchorProvider_TypeID is the unique identifier for the type AnchorProvider.
const AnchorProvider_TypeID = 0xad913fba242f2fe2

func (c AnchorProvider) Ls(ctx context.Context, params func(AnchorProvider_ls_Params) error) (AnchorProvider_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorProvider_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorProvider_ls_Results_Future{Future: ans.Future()}, release
}
func (c AnchorProvider) Walk(ctx context.Context, params func(AnchorProvider_walk_Params) error) (AnchorProvider_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorProvider_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorProvider_walk_Results_Future{Future: ans.Future()}, release
}

func (c AnchorProvider) AddRef() AnchorProvider {
	return AnchorProvider{
		Client: c.Client.AddRef(),
	}
}

func (c AnchorProvider) Release() {
	c.Client.Release()
}

// A AnchorProvider_Server is a AnchorProvider with a local implementation.
type AnchorProvider_Server interface {
	Ls(context.Context, AnchorProvider_ls) error

	Walk(context.Context, AnchorProvider_walk) error
}

// AnchorProvider_NewServer creates a new Server from an implementation of AnchorProvider_Server.
func AnchorProvider_NewServer(s AnchorProvider_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AnchorProvider_Methods(nil, s), s, c, policy)
}

// AnchorProvider_ServerToClient creates a new Client from an implementation of AnchorProvider_Server.
// The caller is responsible for calling Release on the returned Client.
func AnchorProvider_ServerToClient(s AnchorProvider_Server, policy *server.Policy) AnchorProvider {
	return AnchorProvider{Client: capnp.NewClient(AnchorProvider_NewServer(s, policy))}
}

// AnchorProvider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AnchorProvider_Methods(methods []server.Method, s AnchorProvider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, AnchorProvider_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xad913fba242f2fe2,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorProvider",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, AnchorProvider_walk{call})
		},
	})

	return methods
}

// AnchorProvider_ls holds the state for a server call to AnchorProvider.ls.
// See server.Call for documentation.
type AnchorProvider_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorProvider_ls) Args() AnchorProvider_ls_Params {
	return AnchorProvider_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorProvider_ls) AllocResults() (AnchorProvider_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{Struct: r}, err
}

// AnchorProvider_walk holds the state for a server call to AnchorProvider.walk.
// See server.Call for documentation.
type AnchorProvider_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorProvider_walk) Args() AnchorProvider_walk_Params {
	return AnchorProvider_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorProvider_walk) AllocResults() (AnchorProvider_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{Struct: r}, err
}

type AnchorProvider_ls_Params struct{ capnp.Struct }

// AnchorProvider_ls_Params_TypeID is the unique identifier for the type AnchorProvider_ls_Params.
const AnchorProvider_ls_Params_TypeID = 0xbd07b053a83055a2

func NewAnchorProvider_ls_Params(s *capnp.Segment) (AnchorProvider_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Params{st}, err
}

func NewRootAnchorProvider_ls_Params(s *capnp.Segment) (AnchorProvider_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Params{st}, err
}

func ReadRootAnchorProvider_ls_Params(msg *capnp.Message) (AnchorProvider_ls_Params, error) {
	root, err := msg.Root()
	return AnchorProvider_ls_Params{root.Struct()}, err
}

func (s AnchorProvider_ls_Params) String() string {
	str, _ := text.Marshal(0xbd07b053a83055a2, s.Struct)
	return str
}

func (s AnchorProvider_ls_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AnchorProvider_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_ls_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AnchorProvider_ls_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// AnchorProvider_ls_Params_List is a list of AnchorProvider_ls_Params.
type AnchorProvider_ls_Params_List struct{ capnp.List }

// NewAnchorProvider_ls_Params creates a new list of AnchorProvider_ls_Params.
func NewAnchorProvider_ls_Params_List(s *capnp.Segment, sz int32) (AnchorProvider_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_ls_Params_List{l}, err
}

func (s AnchorProvider_ls_Params_List) At(i int) AnchorProvider_ls_Params {
	return AnchorProvider_ls_Params{s.List.Struct(i)}
}

func (s AnchorProvider_ls_Params_List) Set(i int, v AnchorProvider_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xbd07b053a83055a2, s.List)
	return str
}

// AnchorProvider_ls_Params_Future is a wrapper for a AnchorProvider_ls_Params promised by a client call.
type AnchorProvider_ls_Params_Future struct{ *capnp.Future }

func (p AnchorProvider_ls_Params_Future) Struct() (AnchorProvider_ls_Params, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_ls_Params{s}, err
}

type AnchorProvider_ls_Results struct{ capnp.Struct }

// AnchorProvider_ls_Results_TypeID is the unique identifier for the type AnchorProvider_ls_Results.
const AnchorProvider_ls_Results_TypeID = 0xcfd196b055a5d417

func NewAnchorProvider_ls_Results(s *capnp.Segment) (AnchorProvider_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{st}, err
}

func NewRootAnchorProvider_ls_Results(s *capnp.Segment) (AnchorProvider_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_ls_Results{st}, err
}

func ReadRootAnchorProvider_ls_Results(msg *capnp.Message) (AnchorProvider_ls_Results, error) {
	root, err := msg.Root()
	return AnchorProvider_ls_Results{root.Struct()}, err
}

func (s AnchorProvider_ls_Results) String() string {
	str, _ := text.Marshal(0xcfd196b055a5d417, s.Struct)
	return str
}

func (s AnchorProvider_ls_Results) Anchors() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s AnchorProvider_ls_Results) HasAnchors() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_ls_Results) SetAnchors(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s AnchorProvider_ls_Results) NewAnchors(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnchorProvider_ls_Results_List is a list of AnchorProvider_ls_Results.
type AnchorProvider_ls_Results_List struct{ capnp.List }

// NewAnchorProvider_ls_Results creates a new list of AnchorProvider_ls_Results.
func NewAnchorProvider_ls_Results_List(s *capnp.Segment, sz int32) (AnchorProvider_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_ls_Results_List{l}, err
}

func (s AnchorProvider_ls_Results_List) At(i int) AnchorProvider_ls_Results {
	return AnchorProvider_ls_Results{s.List.Struct(i)}
}

func (s AnchorProvider_ls_Results_List) Set(i int, v AnchorProvider_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xcfd196b055a5d417, s.List)
	return str
}

// AnchorProvider_ls_Results_Future is a wrapper for a AnchorProvider_ls_Results promised by a client call.
type AnchorProvider_ls_Results_Future struct{ *capnp.Future }

func (p AnchorProvider_ls_Results_Future) Struct() (AnchorProvider_ls_Results, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_ls_Results{s}, err
}

type AnchorProvider_walk_Params struct{ capnp.Struct }

// AnchorProvider_walk_Params_TypeID is the unique identifier for the type AnchorProvider_walk_Params.
const AnchorProvider_walk_Params_TypeID = 0x81c6e2db81680729

func NewAnchorProvider_walk_Params(s *capnp.Segment) (AnchorProvider_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Params{st}, err
}

func NewRootAnchorProvider_walk_Params(s *capnp.Segment) (AnchorProvider_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Params{st}, err
}

func ReadRootAnchorProvider_walk_Params(msg *capnp.Message) (AnchorProvider_walk_Params, error) {
	root, err := msg.Root()
	return AnchorProvider_walk_Params{root.Struct()}, err
}

func (s AnchorProvider_walk_Params) String() string {
	str, _ := text.Marshal(0x81c6e2db81680729, s.Struct)
	return str
}

func (s AnchorProvider_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AnchorProvider_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AnchorProvider_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// AnchorProvider_walk_Params_List is a list of AnchorProvider_walk_Params.
type AnchorProvider_walk_Params_List struct{ capnp.List }

// NewAnchorProvider_walk_Params creates a new list of AnchorProvider_walk_Params.
func NewAnchorProvider_walk_Params_List(s *capnp.Segment, sz int32) (AnchorProvider_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_walk_Params_List{l}, err
}

func (s AnchorProvider_walk_Params_List) At(i int) AnchorProvider_walk_Params {
	return AnchorProvider_walk_Params{s.List.Struct(i)}
}

func (s AnchorProvider_walk_Params_List) Set(i int, v AnchorProvider_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_walk_Params_List) String() string {
	str, _ := text.MarshalList(0x81c6e2db81680729, s.List)
	return str
}

// AnchorProvider_walk_Params_Future is a wrapper for a AnchorProvider_walk_Params promised by a client call.
type AnchorProvider_walk_Params_Future struct{ *capnp.Future }

func (p AnchorProvider_walk_Params_Future) Struct() (AnchorProvider_walk_Params, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_walk_Params{s}, err
}

type AnchorProvider_walk_Results struct{ capnp.Struct }

// AnchorProvider_walk_Results_TypeID is the unique identifier for the type AnchorProvider_walk_Results.
const AnchorProvider_walk_Results_TypeID = 0xba40f919d2a6c66e

func NewAnchorProvider_walk_Results(s *capnp.Segment) (AnchorProvider_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{st}, err
}

func NewRootAnchorProvider_walk_Results(s *capnp.Segment) (AnchorProvider_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorProvider_walk_Results{st}, err
}

func ReadRootAnchorProvider_walk_Results(msg *capnp.Message) (AnchorProvider_walk_Results, error) {
	root, err := msg.Root()
	return AnchorProvider_walk_Results{root.Struct()}, err
}

func (s AnchorProvider_walk_Results) String() string {
	str, _ := text.Marshal(0xba40f919d2a6c66e, s.Struct)
	return str
}

func (s AnchorProvider_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s AnchorProvider_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorProvider_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AnchorProvider_walk_Results_List is a list of AnchorProvider_walk_Results.
type AnchorProvider_walk_Results_List struct{ capnp.List }

// NewAnchorProvider_walk_Results creates a new list of AnchorProvider_walk_Results.
func NewAnchorProvider_walk_Results_List(s *capnp.Segment, sz int32) (AnchorProvider_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorProvider_walk_Results_List{l}, err
}

func (s AnchorProvider_walk_Results_List) At(i int) AnchorProvider_walk_Results {
	return AnchorProvider_walk_Results{s.List.Struct(i)}
}

func (s AnchorProvider_walk_Results_List) Set(i int, v AnchorProvider_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorProvider_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xba40f919d2a6c66e, s.List)
	return str
}

// AnchorProvider_walk_Results_Future is a wrapper for a AnchorProvider_walk_Results promised by a client call.
type AnchorProvider_walk_Results_Future struct{ *capnp.Future }

func (p AnchorProvider_walk_Results_Future) Struct() (AnchorProvider_walk_Results, error) {
	s, err := p.Future.Struct()
	return AnchorProvider_walk_Results{s}, err
}

func (p AnchorProvider_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x9cU]h\x1cU\x14>\xe7\xde\x99\x9d\xdd\x92" +
	"f{sS$\xd5\xa2\xe8\x8aM$\xdb\x84\xb4\x0f\xae" +
	"\xe2l\x97\x94$Ea'M\x04}\x91e3\x90\x90" +
	"I6\xcel\xdc'\x09E\xda\xa2\x0fb\x95\xf8Ph" +
	"\xc1\xc2\x86*-\xc6\"\x85\x14R\xe8\x83\x95\x80Z\x8c" +
	"\x16\xa9>\xa8E\x85\x0a\xfe\x04ET\x12W\xee\x9d\xbd" +
	"3\x93\xed\xc6\xbf\xa7]f\xce\xfd\xcew\xbe\xf3}w" +
	"z\x9e&Y\xd2\xab\x9b\x06\x805\xa2\xc7j\x9d\xc6\xf8" +
	"\x91\xcfo^=\x02l7\x02\xe8h\x00\xf4\x1d\xa5\x87" +
	"\x10\x90\x9f\xa0&`\xad\xed\xe1\xd3\xab\xf7-\xbd\xfc<" +
	"\xb0;\x11@\x13\xef\xdf\xa6\xc3\x08Z\xeddj\xfd\xa9" +
	"\xbe\x9fv\xbf\x08\xac\x95\xd6\xce-\x0c~\x1d?\xf7\xeb" +
	":\x00\xf2S\xf4$\xaf\xd2\x07\x00\xf8\x12=\xce\x13\xe2" +
	"Lm\xf9\xf4\x1b\x17?\x9cZz\xc9\x87\xf1\xfb\xac\xf9" +
	"}6d\x9f\x9b{\xf7\xa6.\x99'\xce\xdf\x86\xd6\xad" +
	"}\xc7\x1f\x12\x18|\xbfv\x9c\x1f\x95h??\xba\xf6" +
	"\xde1wc\x11\xd8\xce\x00mJk\x13h\xb3\x9a@" +
	"\x9b\xbe\xba\xb0\xda\xf1{\xf6Rt\xacymX\x14\xbc" +
	".\x0b\xce\x8c\xf6\x9c=\xbch,G\x0b\xaeh\x19Q" +
	"\xb0\"\x0b\xde\xbd1tW\xf7+/\\\xbe\x8d\xcf-" +
	"\xedM\xbe&\xf9|\xaf\x0d\xf0\x9d\xba\xe0s\xcfs\x87" +
	"/\\\xce]\xfb\x00,\x8e$\x14F\xc2\xf2\x0dm\x95" +
	"'D\x19\xd7\xf5\xb7\x00kw|R\x1d]|\xed\xa3" +
	"k\xd1\xd6\xa7\xf4\x9ch]\xd5E\xeb\xeb\xf3\xe7\x8f\xbd" +
	"\xb3R\xf9\xd8\x9fNJ~]\xdf&$w\xf6<\xf8" +
	"\xdb\xc8\x97\x9d7\x80qu\x94/\xeb\x7f\x00\xf2+\xf2" +
	"\xe4\x8f\x9f\xde}\xb1\xff\xfdC\xdf\x08\x1e\x01\xf6W\xba" +
	"\x14\xe6\x96^\x01\xac\xf1\xf5\xb3\x03m\x85/\xbe\xf5\x11" +
	"$\xf6\xc1\x18\x11\xd8\xf4\x913\x17\x8a\x0b\xaf\xfe\x00\x8c" +
	"\xd3p\x04@\xde\x19\xfb\x8c\xef\x8f\x89V\xbd\xb1\x01\xfe" +
	"\xa4\xf8\xf7gv\xdf\xcahu\xfe\x97\x90F\xdf\x81\xd8" +
	"6\xd1e(fBw\xad\xe8\xccze\xdbMk\xc5" +
	"\xc2\xcc\xf4L\xe6\xc0tq\xbc\xe4\xe6\xdd\xd2\xb3\x13c" +
	"\xb6\x9b\xae\x14\x9c\xc9T\xbe\xe0\x16\xa6<\x00K\xa3\x1a" +
	"\x80\x86\x00l{\x17\x80\x15\xa7h\xb5\x13L\xce\x14\xca" +
	"\xe3\xd8\x02\x04[\x00\x1b\xf1\x9e\x98\xb0+\xe9\xc1\xc2\xf4" +
	"\x98c\xbb\xe9q\xf9\x9b\x1a\xb6\xbdY\xa7\x8c^P\x8b" +
	"\xaa\x96\xda\x15+\x8e\x18\x190\x91\x0b7\xc6\xf4\xcc\\" +
	"\x1d\xca\x1c\xb6\x8b%w\xcc\x8aS\x1d \xd0\x1a\x95d" +
	"\xac\xb7\x0b\x08\xbb\xdf@T\xe3\x87z\xb3\x8e\x0c\x10\xb6" +
	"\xddHN\x94m7\x8b\xa6S*M\xce\xced1\x8f" +
	"\xff\x8a|31ru1R\x04\xe7\\I\xcc\xc3V" +
	"\xc0<E\xdc\x11\xd2\x07\x14\x0f\x83\x1e\xa4Q\xf0\xa4P" +
	"<\x8fX\x1fJ\xd9\x1e\x95\x09Y\xef\xae\xfaP\xc1U" +
	"\x80*<\xac\xa3K\x0eE\x1d/\x8bI\xb1\xb5\xcd\x03" +
	"\xd1h\xb3\xb4XX\xb0\x85\xff\xb3\xd5f.i\x86\x97" +
	"\x09\xf1\xcc\x82<\x83,\x8c+ 2\xd8\x82c\x80\xed" +
	"x)\xd3\xd7\xfc?\x11E\x05\x96\x94h\x88\x96&U" +
	"U\x81Eu/1&\x94\xd3\x0d\x09\xb3Y4\x12q" +
	"\x81\xf4\x1b\x8e\x09\xa0\x96\x80\xc6AA#K\xd1z\x8c" +
	" b\xbb\xc81\x1b\xba\x17\xc0\xea\xa7h\xe5\x092\x82" +
	"\xedH\x00\xd8\xe3\xe2\xe1 EkD\xf0\xb5mW\xf1" +
	"5\xcae\x07u \xa8\x03\x1a\x9e\xfd\x0c&\x80`\xe2" +
	"\x1f\x05w\xbc\xba\xdc\xde\x96>\xf4\xe5\x0e|\xb8Y\xf6" +
	"V\xf8[k(\x8f7UB\xc4\xa6\xd9Jr\xe1J" +
	"\xe6\xfc\xac\x88e\x07In\xbel\x89\xe8'04P" +
	"<\x00\xed\x14\x06JQ\xb4zB\x81\xbbw\x01X{" +
	"(Z\xfb\x08\x9a~\xda\x1aR\xb6\x03\x90\x96&\x11\x81" +
	" FZ\xc6\x1a\x87P\x12\xaa\x82\xc6\xd0S;b\x1c" +
	"\xf5UD\xf5\x95e,#\x8dc\xfa\xc36\xcd[t" +
	"\xbcf\x17G4\x1f\xc2\x16C\xfd\xca\x18\x7f\x05\x00\x00" +
	"\xff\xffAe8P"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x81c6e2db81680729,
		0x8390b923d29e3b12,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0xad913fba242f2fe2,
		0xb0fd7286c7f13ef3,
		0xba40f919d2a6c66e,
		0xbd07b053a83055a2,
		0xbe89922d1c49d9c5,
		0xcdcf42beb2537d20,
		0xcfd196b055a5d417,
		0xd377c9b486ad95d5,
		0xd929e054f82b286c,
		0xe54acc44b61fd7ef,
		0xe6df611247a8fc13,
		0xee93a663b2a23c03,
		0xf495a555c9344000)
}
