// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xbe89922d1c49d9c5

func (c Anchor) Set(ctx context.Context, params func(Anchor_set_Params) error) (Anchor_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_set_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Set(context.Context, Anchor_set) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe89922d1c49d9c5,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Anchor",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Anchor_set{call})
		},
	})

	return methods
}

// Anchor_set holds the state for a server call to Anchor.set.
// See server.Call for documentation.
type Anchor_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_set) Args() Anchor_set_Params {
	return Anchor_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_set) AllocResults() (Anchor_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_set_Results{Struct: r}, err
}

type Anchor_set_Params struct{ capnp.Struct }

// Anchor_set_Params_TypeID is the unique identifier for the type Anchor_set_Params.
const Anchor_set_Params_TypeID = 0xd377c9b486ad95d5

func NewAnchor_set_Params(s *capnp.Segment) (Anchor_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_set_Params{st}, err
}

func NewRootAnchor_set_Params(s *capnp.Segment) (Anchor_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_set_Params{st}, err
}

func ReadRootAnchor_set_Params(msg *capnp.Message) (Anchor_set_Params, error) {
	root, err := msg.Root()
	return Anchor_set_Params{root.Struct()}, err
}

func (s Anchor_set_Params) String() string {
	str, _ := text.Marshal(0xd377c9b486ad95d5, s.Struct)
	return str
}

// Anchor_set_Params_List is a list of Anchor_set_Params.
type Anchor_set_Params_List struct{ capnp.List }

// NewAnchor_set_Params creates a new list of Anchor_set_Params.
func NewAnchor_set_Params_List(s *capnp.Segment, sz int32) (Anchor_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_set_Params_List{l}, err
}

func (s Anchor_set_Params_List) At(i int) Anchor_set_Params {
	return Anchor_set_Params{s.List.Struct(i)}
}

func (s Anchor_set_Params_List) Set(i int, v Anchor_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_set_Params_List) String() string {
	str, _ := text.MarshalList(0xd377c9b486ad95d5, s.List)
	return str
}

// Anchor_set_Params_Future is a wrapper for a Anchor_set_Params promised by a client call.
type Anchor_set_Params_Future struct{ *capnp.Future }

func (p Anchor_set_Params_Future) Struct() (Anchor_set_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_set_Params{s}, err
}

type Anchor_set_Results struct{ capnp.Struct }

// Anchor_set_Results_TypeID is the unique identifier for the type Anchor_set_Results.
const Anchor_set_Results_TypeID = 0xb0fd7286c7f13ef3

func NewAnchor_set_Results(s *capnp.Segment) (Anchor_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_set_Results{st}, err
}

func NewRootAnchor_set_Results(s *capnp.Segment) (Anchor_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_set_Results{st}, err
}

func ReadRootAnchor_set_Results(msg *capnp.Message) (Anchor_set_Results, error) {
	root, err := msg.Root()
	return Anchor_set_Results{root.Struct()}, err
}

func (s Anchor_set_Results) String() string {
	str, _ := text.Marshal(0xb0fd7286c7f13ef3, s.Struct)
	return str
}

// Anchor_set_Results_List is a list of Anchor_set_Results.
type Anchor_set_Results_List struct{ capnp.List }

// NewAnchor_set_Results creates a new list of Anchor_set_Results.
func NewAnchor_set_Results_List(s *capnp.Segment, sz int32) (Anchor_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Anchor_set_Results_List{l}, err
}

func (s Anchor_set_Results_List) At(i int) Anchor_set_Results {
	return Anchor_set_Results{s.List.Struct(i)}
}

func (s Anchor_set_Results_List) Set(i int, v Anchor_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Anchor_set_Results_List) String() string {
	str, _ := text.MarshalList(0xb0fd7286c7f13ef3, s.List)
	return str
}

// Anchor_set_Results_Future is a wrapper for a Anchor_set_Results promised by a client call.
type Anchor_set_Results_Future struct{ *capnp.Future }

func (p Anchor_set_Results_Future) Struct() (Anchor_set_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_set_Results{s}, err
}

type AnchorManager struct{ Client *capnp.Client }

// AnchorManager_TypeID is the unique identifier for the type AnchorManager.
const AnchorManager_TypeID = 0xd1ad5f4eadcdee8d

func (c AnchorManager) Path(ctx context.Context, params func(AnchorManager_path_Params) error) (AnchorManager_path_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "path",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorManager_path_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorManager_path_Results_Future{Future: ans.Future()}, release
}
func (c AnchorManager) Ls(ctx context.Context, params func(AnchorManager_ls_Params) error) (AnchorManager_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorManager_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorManager_ls_Results_Future{Future: ans.Future()}, release
}
func (c AnchorManager) Walk(ctx context.Context, params func(AnchorManager_walk_Params) error) (AnchorManager_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      2,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnchorManager_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnchorManager_walk_Results_Future{Future: ans.Future()}, release
}

func (c AnchorManager) AddRef() AnchorManager {
	return AnchorManager{
		Client: c.Client.AddRef(),
	}
}

func (c AnchorManager) Release() {
	c.Client.Release()
}

// A AnchorManager_Server is a AnchorManager with a local implementation.
type AnchorManager_Server interface {
	Path(context.Context, AnchorManager_path) error

	Ls(context.Context, AnchorManager_ls) error

	Walk(context.Context, AnchorManager_walk) error
}

// AnchorManager_NewServer creates a new Server from an implementation of AnchorManager_Server.
func AnchorManager_NewServer(s AnchorManager_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AnchorManager_Methods(nil, s), s, c, policy)
}

// AnchorManager_ServerToClient creates a new Client from an implementation of AnchorManager_Server.
// The caller is responsible for calling Release on the returned Client.
func AnchorManager_ServerToClient(s AnchorManager_Server, policy *server.Policy) AnchorManager {
	return AnchorManager{Client: capnp.NewClient(AnchorManager_NewServer(s, policy))}
}

// AnchorManager_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AnchorManager_Methods(methods []server.Method, s AnchorManager_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      0,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "path",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Path(ctx, AnchorManager_path{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      1,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, AnchorManager_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd1ad5f4eadcdee8d,
			MethodID:      2,
			InterfaceName: "cluster.capnp:AnchorManager",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, AnchorManager_walk{call})
		},
	})

	return methods
}

// AnchorManager_path holds the state for a server call to AnchorManager.path.
// See server.Call for documentation.
type AnchorManager_path struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorManager_path) Args() AnchorManager_path_Params {
	return AnchorManager_path_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorManager_path) AllocResults() (AnchorManager_path_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_path_Results{Struct: r}, err
}

// AnchorManager_ls holds the state for a server call to AnchorManager.ls.
// See server.Call for documentation.
type AnchorManager_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorManager_ls) Args() AnchorManager_ls_Params {
	return AnchorManager_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorManager_ls) AllocResults() (AnchorManager_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_ls_Results{Struct: r}, err
}

// AnchorManager_walk holds the state for a server call to AnchorManager.walk.
// See server.Call for documentation.
type AnchorManager_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnchorManager_walk) Args() AnchorManager_walk_Params {
	return AnchorManager_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnchorManager_walk) AllocResults() (AnchorManager_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_walk_Results{Struct: r}, err
}

type AnchorManager_path_Params struct{ capnp.Struct }

// AnchorManager_path_Params_TypeID is the unique identifier for the type AnchorManager_path_Params.
const AnchorManager_path_Params_TypeID = 0xe1288479eb25823a

func NewAnchorManager_path_Params(s *capnp.Segment) (AnchorManager_path_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AnchorManager_path_Params{st}, err
}

func NewRootAnchorManager_path_Params(s *capnp.Segment) (AnchorManager_path_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AnchorManager_path_Params{st}, err
}

func ReadRootAnchorManager_path_Params(msg *capnp.Message) (AnchorManager_path_Params, error) {
	root, err := msg.Root()
	return AnchorManager_path_Params{root.Struct()}, err
}

func (s AnchorManager_path_Params) String() string {
	str, _ := text.Marshal(0xe1288479eb25823a, s.Struct)
	return str
}

// AnchorManager_path_Params_List is a list of AnchorManager_path_Params.
type AnchorManager_path_Params_List struct{ capnp.List }

// NewAnchorManager_path_Params creates a new list of AnchorManager_path_Params.
func NewAnchorManager_path_Params_List(s *capnp.Segment, sz int32) (AnchorManager_path_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return AnchorManager_path_Params_List{l}, err
}

func (s AnchorManager_path_Params_List) At(i int) AnchorManager_path_Params {
	return AnchorManager_path_Params{s.List.Struct(i)}
}

func (s AnchorManager_path_Params_List) Set(i int, v AnchorManager_path_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_path_Params_List) String() string {
	str, _ := text.MarshalList(0xe1288479eb25823a, s.List)
	return str
}

// AnchorManager_path_Params_Future is a wrapper for a AnchorManager_path_Params promised by a client call.
type AnchorManager_path_Params_Future struct{ *capnp.Future }

func (p AnchorManager_path_Params_Future) Struct() (AnchorManager_path_Params, error) {
	s, err := p.Future.Struct()
	return AnchorManager_path_Params{s}, err
}

type AnchorManager_path_Results struct{ capnp.Struct }

// AnchorManager_path_Results_TypeID is the unique identifier for the type AnchorManager_path_Results.
const AnchorManager_path_Results_TypeID = 0x80de38a3c1d57e83

func NewAnchorManager_path_Results(s *capnp.Segment) (AnchorManager_path_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_path_Results{st}, err
}

func NewRootAnchorManager_path_Results(s *capnp.Segment) (AnchorManager_path_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_path_Results{st}, err
}

func ReadRootAnchorManager_path_Results(msg *capnp.Message) (AnchorManager_path_Results, error) {
	root, err := msg.Root()
	return AnchorManager_path_Results{root.Struct()}, err
}

func (s AnchorManager_path_Results) String() string {
	str, _ := text.Marshal(0x80de38a3c1d57e83, s.Struct)
	return str
}

func (s AnchorManager_path_Results) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AnchorManager_path_Results) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorManager_path_Results) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AnchorManager_path_Results) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// AnchorManager_path_Results_List is a list of AnchorManager_path_Results.
type AnchorManager_path_Results_List struct{ capnp.List }

// NewAnchorManager_path_Results creates a new list of AnchorManager_path_Results.
func NewAnchorManager_path_Results_List(s *capnp.Segment, sz int32) (AnchorManager_path_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorManager_path_Results_List{l}, err
}

func (s AnchorManager_path_Results_List) At(i int) AnchorManager_path_Results {
	return AnchorManager_path_Results{s.List.Struct(i)}
}

func (s AnchorManager_path_Results_List) Set(i int, v AnchorManager_path_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_path_Results_List) String() string {
	str, _ := text.MarshalList(0x80de38a3c1d57e83, s.List)
	return str
}

// AnchorManager_path_Results_Future is a wrapper for a AnchorManager_path_Results promised by a client call.
type AnchorManager_path_Results_Future struct{ *capnp.Future }

func (p AnchorManager_path_Results_Future) Struct() (AnchorManager_path_Results, error) {
	s, err := p.Future.Struct()
	return AnchorManager_path_Results{s}, err
}

type AnchorManager_ls_Params struct{ capnp.Struct }

// AnchorManager_ls_Params_TypeID is the unique identifier for the type AnchorManager_ls_Params.
const AnchorManager_ls_Params_TypeID = 0xff6cce7fc87fa63c

func NewAnchorManager_ls_Params(s *capnp.Segment) (AnchorManager_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_ls_Params{st}, err
}

func NewRootAnchorManager_ls_Params(s *capnp.Segment) (AnchorManager_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_ls_Params{st}, err
}

func ReadRootAnchorManager_ls_Params(msg *capnp.Message) (AnchorManager_ls_Params, error) {
	root, err := msg.Root()
	return AnchorManager_ls_Params{root.Struct()}, err
}

func (s AnchorManager_ls_Params) String() string {
	str, _ := text.Marshal(0xff6cce7fc87fa63c, s.Struct)
	return str
}

func (s AnchorManager_ls_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AnchorManager_ls_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorManager_ls_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AnchorManager_ls_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// AnchorManager_ls_Params_List is a list of AnchorManager_ls_Params.
type AnchorManager_ls_Params_List struct{ capnp.List }

// NewAnchorManager_ls_Params creates a new list of AnchorManager_ls_Params.
func NewAnchorManager_ls_Params_List(s *capnp.Segment, sz int32) (AnchorManager_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorManager_ls_Params_List{l}, err
}

func (s AnchorManager_ls_Params_List) At(i int) AnchorManager_ls_Params {
	return AnchorManager_ls_Params{s.List.Struct(i)}
}

func (s AnchorManager_ls_Params_List) Set(i int, v AnchorManager_ls_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_ls_Params_List) String() string {
	str, _ := text.MarshalList(0xff6cce7fc87fa63c, s.List)
	return str
}

// AnchorManager_ls_Params_Future is a wrapper for a AnchorManager_ls_Params promised by a client call.
type AnchorManager_ls_Params_Future struct{ *capnp.Future }

func (p AnchorManager_ls_Params_Future) Struct() (AnchorManager_ls_Params, error) {
	s, err := p.Future.Struct()
	return AnchorManager_ls_Params{s}, err
}

type AnchorManager_ls_Results struct{ capnp.Struct }

// AnchorManager_ls_Results_TypeID is the unique identifier for the type AnchorManager_ls_Results.
const AnchorManager_ls_Results_TypeID = 0xa3efa916dbb3213b

func NewAnchorManager_ls_Results(s *capnp.Segment) (AnchorManager_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_ls_Results{st}, err
}

func NewRootAnchorManager_ls_Results(s *capnp.Segment) (AnchorManager_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_ls_Results{st}, err
}

func ReadRootAnchorManager_ls_Results(msg *capnp.Message) (AnchorManager_ls_Results, error) {
	root, err := msg.Root()
	return AnchorManager_ls_Results{root.Struct()}, err
}

func (s AnchorManager_ls_Results) String() string {
	str, _ := text.Marshal(0xa3efa916dbb3213b, s.Struct)
	return str
}

func (s AnchorManager_ls_Results) Anchors() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s AnchorManager_ls_Results) HasAnchors() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorManager_ls_Results) SetAnchors(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAnchors sets the anchors field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s AnchorManager_ls_Results) NewAnchors(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AnchorManager_ls_Results_List is a list of AnchorManager_ls_Results.
type AnchorManager_ls_Results_List struct{ capnp.List }

// NewAnchorManager_ls_Results creates a new list of AnchorManager_ls_Results.
func NewAnchorManager_ls_Results_List(s *capnp.Segment, sz int32) (AnchorManager_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorManager_ls_Results_List{l}, err
}

func (s AnchorManager_ls_Results_List) At(i int) AnchorManager_ls_Results {
	return AnchorManager_ls_Results{s.List.Struct(i)}
}

func (s AnchorManager_ls_Results_List) Set(i int, v AnchorManager_ls_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_ls_Results_List) String() string {
	str, _ := text.MarshalList(0xa3efa916dbb3213b, s.List)
	return str
}

// AnchorManager_ls_Results_Future is a wrapper for a AnchorManager_ls_Results promised by a client call.
type AnchorManager_ls_Results_Future struct{ *capnp.Future }

func (p AnchorManager_ls_Results_Future) Struct() (AnchorManager_ls_Results, error) {
	s, err := p.Future.Struct()
	return AnchorManager_ls_Results{s}, err
}

type AnchorManager_walk_Params struct{ capnp.Struct }

// AnchorManager_walk_Params_TypeID is the unique identifier for the type AnchorManager_walk_Params.
const AnchorManager_walk_Params_TypeID = 0xebdfb7b8e56a11f6

func NewAnchorManager_walk_Params(s *capnp.Segment) (AnchorManager_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_walk_Params{st}, err
}

func NewRootAnchorManager_walk_Params(s *capnp.Segment) (AnchorManager_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_walk_Params{st}, err
}

func ReadRootAnchorManager_walk_Params(msg *capnp.Message) (AnchorManager_walk_Params, error) {
	root, err := msg.Root()
	return AnchorManager_walk_Params{root.Struct()}, err
}

func (s AnchorManager_walk_Params) String() string {
	str, _ := text.Marshal(0xebdfb7b8e56a11f6, s.Struct)
	return str
}

func (s AnchorManager_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AnchorManager_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorManager_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AnchorManager_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// AnchorManager_walk_Params_List is a list of AnchorManager_walk_Params.
type AnchorManager_walk_Params_List struct{ capnp.List }

// NewAnchorManager_walk_Params creates a new list of AnchorManager_walk_Params.
func NewAnchorManager_walk_Params_List(s *capnp.Segment, sz int32) (AnchorManager_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorManager_walk_Params_List{l}, err
}

func (s AnchorManager_walk_Params_List) At(i int) AnchorManager_walk_Params {
	return AnchorManager_walk_Params{s.List.Struct(i)}
}

func (s AnchorManager_walk_Params_List) Set(i int, v AnchorManager_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xebdfb7b8e56a11f6, s.List)
	return str
}

// AnchorManager_walk_Params_Future is a wrapper for a AnchorManager_walk_Params promised by a client call.
type AnchorManager_walk_Params_Future struct{ *capnp.Future }

func (p AnchorManager_walk_Params_Future) Struct() (AnchorManager_walk_Params, error) {
	s, err := p.Future.Struct()
	return AnchorManager_walk_Params{s}, err
}

type AnchorManager_walk_Results struct{ capnp.Struct }

// AnchorManager_walk_Results_TypeID is the unique identifier for the type AnchorManager_walk_Results.
const AnchorManager_walk_Results_TypeID = 0xe57b214e051e7d8e

func NewAnchorManager_walk_Results(s *capnp.Segment) (AnchorManager_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_walk_Results{st}, err
}

func NewRootAnchorManager_walk_Results(s *capnp.Segment) (AnchorManager_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnchorManager_walk_Results{st}, err
}

func ReadRootAnchorManager_walk_Results(msg *capnp.Message) (AnchorManager_walk_Results, error) {
	root, err := msg.Root()
	return AnchorManager_walk_Results{root.Struct()}, err
}

func (s AnchorManager_walk_Results) String() string {
	str, _ := text.Marshal(0xe57b214e051e7d8e, s.Struct)
	return str
}

func (s AnchorManager_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s AnchorManager_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s AnchorManager_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AnchorManager_walk_Results_List is a list of AnchorManager_walk_Results.
type AnchorManager_walk_Results_List struct{ capnp.List }

// NewAnchorManager_walk_Results creates a new list of AnchorManager_walk_Results.
func NewAnchorManager_walk_Results_List(s *capnp.Segment, sz int32) (AnchorManager_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnchorManager_walk_Results_List{l}, err
}

func (s AnchorManager_walk_Results_List) At(i int) AnchorManager_walk_Results {
	return AnchorManager_walk_Results{s.List.Struct(i)}
}

func (s AnchorManager_walk_Results_List) Set(i int, v AnchorManager_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnchorManager_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xe57b214e051e7d8e, s.List)
	return str
}

// AnchorManager_walk_Results_Future is a wrapper for a AnchorManager_walk_Results promised by a client call.
type AnchorManager_walk_Results_Future struct{ *capnp.Future }

func (p AnchorManager_walk_Results_Future) Struct() (AnchorManager_walk_Results, error) {
	s, err := p.Future.Struct()
	return AnchorManager_walk_Results{s}, err
}

func (p AnchorManager_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Handler struct{ Client *capnp.Client }

// View_Handler_TypeID is the unique identifier for the type View_Handler.
const View_Handler_TypeID = 0xee93a663b2a23c03

func (c View_Handler) Handle(ctx context.Context, params func(View_Handler_handle_Params) error) (View_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c View_Handler) AddRef() View_Handler {
	return View_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c View_Handler) Release() {
	c.Client.Release()
}

// A View_Handler_Server is a View_Handler with a local implementation.
type View_Handler_Server interface {
	Handle(context.Context, View_Handler_handle) error
}

// View_Handler_NewServer creates a new Server from an implementation of View_Handler_Server.
func View_Handler_NewServer(s View_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Handler_Methods(nil, s), s, c, policy)
}

// View_Handler_ServerToClient creates a new Client from an implementation of View_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func View_Handler_ServerToClient(s View_Handler_Server, policy *server.Policy) View_Handler {
	return View_Handler{Client: capnp.NewClient(View_Handler_NewServer(s, policy))}
}

// View_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Handler_Methods(methods []server.Method, s View_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee93a663b2a23c03,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, View_Handler_handle{call})
		},
	})

	return methods
}

// View_Handler_handle holds the state for a server call to View_Handler.handle.
// See server.Call for documentation.
type View_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_Handler_handle) Args() View_Handler_handle_Params {
	return View_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_Handler_handle) AllocResults() (View_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{Struct: r}, err
}

type View_Handler_handle_Params struct{ capnp.Struct }

// View_Handler_handle_Params_TypeID is the unique identifier for the type View_Handler_handle_Params.
const View_Handler_handle_Params_TypeID = 0x8eb96dceb6a99ebd

func NewView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func NewRootView_Handler_handle_Params(s *capnp.Segment) (View_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_Handler_handle_Params{st}, err
}

func ReadRootView_Handler_handle_Params(msg *capnp.Message) (View_Handler_handle_Params, error) {
	root, err := msg.Root()
	return View_Handler_handle_Params{root.Struct()}, err
}

func (s View_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x8eb96dceb6a99ebd, s.Struct)
	return str
}

func (s View_Handler_handle_Params) Records() (View_Record_List, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record_List{List: p.List()}, err
}

func (s View_Handler_handle_Params) HasRecords() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Handler_handle_Params) SetRecords(v View_Record_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated View_Record_List, preferring placement in s's segment.
func (s View_Handler_handle_Params) NewRecords(n int32) (View_Record_List, error) {
	l, err := NewView_Record_List(s.Struct.Segment(), n)
	if err != nil {
		return View_Record_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// View_Handler_handle_Params_List is a list of View_Handler_handle_Params.
type View_Handler_handle_Params_List struct{ capnp.List }

// NewView_Handler_handle_Params creates a new list of View_Handler_handle_Params.
func NewView_Handler_handle_Params_List(s *capnp.Segment, sz int32) (View_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_Handler_handle_Params_List{l}, err
}

func (s View_Handler_handle_Params_List) At(i int) View_Handler_handle_Params {
	return View_Handler_handle_Params{s.List.Struct(i)}
}

func (s View_Handler_handle_Params_List) Set(i int, v View_Handler_handle_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Params_List) String() string {
	str, _ := text.MarshalList(0x8eb96dceb6a99ebd, s.List)
	return str
}

// View_Handler_handle_Params_Future is a wrapper for a View_Handler_handle_Params promised by a client call.
type View_Handler_handle_Params_Future struct{ *capnp.Future }

func (p View_Handler_handle_Params_Future) Struct() (View_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Params{s}, err
}

type View_Handler_handle_Results struct{ capnp.Struct }

// View_Handler_handle_Results_TypeID is the unique identifier for the type View_Handler_handle_Results.
const View_Handler_handle_Results_TypeID = 0x8390b923d29e3b12

func NewView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func NewRootView_Handler_handle_Results(s *capnp.Segment) (View_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_Handler_handle_Results{st}, err
}

func ReadRootView_Handler_handle_Results(msg *capnp.Message) (View_Handler_handle_Results, error) {
	root, err := msg.Root()
	return View_Handler_handle_Results{root.Struct()}, err
}

func (s View_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0x8390b923d29e3b12, s.Struct)
	return str
}

// View_Handler_handle_Results_List is a list of View_Handler_handle_Results.
type View_Handler_handle_Results_List struct{ capnp.List }

// NewView_Handler_handle_Results creates a new list of View_Handler_handle_Results.
func NewView_Handler_handle_Results_List(s *capnp.Segment, sz int32) (View_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_Handler_handle_Results_List{l}, err
}

func (s View_Handler_handle_Results_List) At(i int) View_Handler_handle_Results {
	return View_Handler_handle_Results{s.List.Struct(i)}
}

func (s View_Handler_handle_Results_List) Set(i int, v View_Handler_handle_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_Handler_handle_Results_List) String() string {
	str, _ := text.MarshalList(0x8390b923d29e3b12, s.List)
	return str
}

// View_Handler_handle_Results_Future is a wrapper for a View_Handler_handle_Results promised by a client call.
type View_Handler_handle_Results_Future struct{ *capnp.Future }

func (p View_Handler_handle_Results_Future) Struct() (View_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return View_Handler_handle_Results{s}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List struct{ capnp.List }

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return View_Record_List{l}, err
}

func (s View_Record_List) At(i int) View_Record { return View_Record{s.List.Struct(i)} }

func (s View_Record_List) Set(i int, v View_Record) error { return s.List.SetStruct(i, v.Struct) }

func (s View_Record_List) String() string {
	str, _ := text.MarshalList(0xcdcf42beb2537d20, s.List)
	return str
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() View_Handler {
	p, _ := s.Struct.Ptr(0)
	return View_Handler{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v View_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List struct{ capnp.List }

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_iter_Params_List{l}, err
}

func (s View_iter_Params_List) At(i int) View_iter_Params { return View_iter_Params{s.List.Struct(i)} }

func (s View_iter_Params_List) Set(i int, v View_iter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Params_List) String() string {
	str, _ := text.MarshalList(0xd929e054f82b286c, s.List)
	return str
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() View_Handler {
	return View_Handler{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List struct{ capnp.List }

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return View_iter_Results_List{l}, err
}

func (s View_iter_Results_List) At(i int) View_iter_Results {
	return View_iter_Results{s.List.Struct(i)}
}

func (s View_iter_Results_List) Set(i int, v View_iter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_iter_Results_List) String() string {
	str, _ := text.MarshalList(0xe6df611247a8fc13, s.List)
	return str
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List struct{ capnp.List }

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return View_lookup_Params_List{l}, err
}

func (s View_lookup_Params_List) At(i int) View_lookup_Params {
	return View_lookup_Params{s.List.Struct(i)}
}

func (s View_lookup_Params_List) Set(i int, v View_lookup_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Params_List) String() string {
	str, _ := text.MarshalList(0xf495a555c9344000, s.List)
	return str
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List struct{ capnp.List }

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return View_lookup_Results_List{l}, err
}

func (s View_lookup_Results_List) At(i int) View_lookup_Results {
	return View_lookup_Results{s.List.Struct(i)}
}

func (s View_lookup_Results_List) Set(i int, v View_lookup_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s View_lookup_Results_List) String() string {
	str, _ := text.MarshalList(0xe54acc44b61fd7ef, s.List)
	return str
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

const schema_fcf6ac08e448a6ac = "x\xda\x94U]h\x1cU\x14>\xe7\xde\xf9\xd9\x94\xb6" +
	"\xe9\xcdM\x04k\xb5\xa6n0\xad$\xb4\xa6\x0f\xba-" +
	"\xeefIIRL\xd9\x89\x8dP\x11d\xd8\x0cM\xcd" +
	"d7\xcelXD\xe2\x8a\xd5\xfa\x03)\xa2\xe4\xa5\x0f" +
	"}\xb0$\x18iP\xabT\xf3\xd0B\x1eJ\x0d\xd8J" +
	"+E\xa2hU\x8c \x85FQ\x8bH\xea\xc8\x9d\xd9" +
	"\xd9\x99\xfd\x13}\xdae\xe6\xfc|\xe7;\xdfwf\xe7" +
	"\xab$Av\xc9\xab*\x80\xf6\xa4\xac8G\x9f\xbf\xb6" +
	"x\xea\xa1o_\x00\xb6\x05\x01dT\x01\xba\xbe\xa1\xfb" +
	"\x11\x90\xffL\xe3\x80N\xd3\x9e\x93W\xef[x\xe3(" +
	"\xb0\xbb\x10@\x12\xef\x1b\xa4A\x04\xc99\x11]{\xa2" +
	"\xeb\x97\xbb_\x07\xb6\x91:\xa7g\xfb~\x8c\x9c\xbe\xb5" +
	"\x06\x80\xfc\x0fz\x82\xdf\xa6\xf7\x03p&\xbd\xc2u\x91" +
	"\xe3\x9c;9w\xf6\xf2\xd8\xc2q\xaf\x8c\xd7\xa7_r" +
	"\xfb\x0cI\xa2\xcf\x9e\xd6\x0f\xbf\xbecn\xf5T\x18\xc8" +
	"\xcbRL\x04L\xb9\x01\xbf=\xf2\xeb\xc5c\xd6\xed\xf7" +
	"\x81\xb5\xf8@\xceI\xeb\x04\x90\x0b\xcb\xfd[:\xde|" +
	"\xed|\x15\x90\x19\xe9]>/\"\xf9\x9c\xd4\xcb\xaf\xb8" +
	"@\xee\x9d|\xec\xcc\xf9\xe4\xe7\x97@\xe3H\x82\x19\xdc" +
	"\x86|A\xba\xca/\xb8\x09\x8b\xd2{\x80\xce\xd4\xcdK" +
	"\xf3\x07\x9e\x9a\xbfRU\xf9\x90\xfc\x037d\x11\xa8\xcb" +
	"\x17\xf9\xb2\xf8\xe7\\\x9b\x9e?\xf6\xd1R\xfe\x8b\x10\xc0" +
	"E\x99\x08\x80f\xfb\x03\x7f\x1e\xfcn\xfb20\xee\xcf" +
	"\xc6g\xe4\xbf\x00\xf9\x9c,F\x8b\xbd\xd8v\xe3\xd9\x97" +
	"\xda\xbf\xf7fw3\x97\xe4\xa4\xc8\\\xfdr\xeb\xd9\x9e" +
	"\xcf\xf6\xaf\x08\xb4%Z>\x90\x9b\x04-\x0br\x1e\xd0" +
	"9>y\x8f|\xa0\xf5\xb9\x950o-\x8aKl\xab" +
	"\"\x8a\xf3\xb5wz\x9b\xf4\xeb?y\xcd\xdd\xe2\xdd\x8a" +
	"\x0b\xeb\x16{z\xe5\x93\x8f\xaf\xdf\x08\xa7\xb6)I\x91" +
	"\xda\xe1\xa6\xd2\xbdo\x9fI\xcf\xbeu\x13\x18\xa7\x01U" +
	"\x80|@\xf9\x8a\x1fR\xc4\x18CJ/\x9f\x14\xff\xfe" +
	"N\xec^\x1a\x9a\x99\xfe=\x18\xb1\xcbP\xd6\x89Zc" +
	"n\xad\xbd\xb3\x85O\x0b\x97M'\xdclJyP\x04" +
	"L+q\xe8p\xd2\xe6\x84\x9d3\xacN)\xad\x8fg" +
	"\xc6c\xdd\x99\xf4H\xd6\x1a\xd03\xfaa\xc3\xea\x1c\xd7" +
	"s#\xd1A\xc3\x9e0s6\x80&Q\x09@B\x00" +
	"\xb6a\x07\x80\x16\xa1\xa85\x13l\x14Q\xb8\x1e\x08\xae" +
	"\x07\xac\xac\xf7\xf8\x11#\xdf\xd9\xa7g\x86M\xc3\xea\x1c" +
	"q\x7f\x8b\x05\xd1.\xc5\xa2\x1fK\x8d\xbc\x16\xc10\x03" +
	"\x0d\xc9@:L\x8e\x15\x8a\xa5\xe2\x83F:k\x0dk" +
	"\x11*\x03\x94\x16\x8d>\xe9l\xd7\x0e \xacME\xf4" +
	"\xf9\x09V\xca\xee\x8c\x01a\x1b\xd4\xc6#9\xc3J`" +
	"\xdc\xccfG'\xc6\x13\x98\xc2\xff\x04>\xa5[\xfaX" +
	"\x05\x19\xc9\"\x19Q\x82\x05\xcb\x05f\xe3F\xc0\x14E" +
	"\xdc\x14\xc0\x07\x14\x0fK=h-\xc2M;:\x18\xf7" +
	"\xf8\xae\xd7@w\x13J\x0dX\xe0\xc3\x7fk\xd0i\x1b" +
	"\xb9`\x93\x95\xccwg\x1aEP\x0aQ\x93\\F}" +
	"S\xa1o\x7f\xc6\xb6\x01a\xb2\xaa\xdaF\xae\x9c+\x12" +
	"\xe2\xca\xdd\x0a\x0e\x8b:\xebK\xe8\xf7\x09\xad$(j" +
	"\x8f\x12Dl\x16\x86b\xfd\xdb\x00\xb4\x1e\x8aZ\x8a " +
	"#\xd8\x8c\x04\x80\x0d\x88\x87}\x14\xb5\x83BT\x86a" +
	"\xf9\xa2Rs9\x13e (\x03\xaa\xb6\xf1\x0c6\x00" +
	"\xc1\x06\xa8\xc2\x10p\xa9\x1e6,\x0f\x85\x98\xc67:" +
	"\xfag\x97iB\x1f\xfbT\x0c\x0c\x82\xfe%d\x0fo" +
	"\x06\xc2:T$%\xa7\xa2\xefv\xd6*\xf2ZTW" +
	"\xf2\x09\xa4\xa6\x9d\xc0\xc6\xbcn\x8e\x96S\xa2T1_" +
	"T\x8d\x1f\x10\xa2L\xa80\x1a\xf7\xde\xd7Zy3\xc1" +
	"\x82'=\x0bY`\x0c@d!\x02\"u\xdd[\xbf" +
	"\xb3'\xfc\x92\x1b\xb5H\xa9\xf9\xf6\x18\x80\x16\xa5\xa8\xed" +
	"\x0c6\xd6\xb1\x19@k\xa7\xa8\xed&\x18\xf7D^!" +
	"\xeeM\x804;\x8a\x08\x04\xb1\xfa\x10\x94C\x13\x9c\xd5" +
	">,\xb1`\xee\xb8'\xf5\x0a\x89\xd7\x18; \xd2/" +
	"Y>n\x8d\xdeEZ\xfe\xd7I#\x95W\x81\x1a!" +
	"\xcb\xf8\x9fZ\xf4?\xdd\x8c\xc5\\\xcb\xc4\xbd\xf5\x95K" +
	"\x84V/\xa2\xd6e\x09\xb3!\x1c\xd1\xdfS\x85\xaa\xde" +
	"\x1dIm\xad\xd2T\xbd\x09\xff\x09\x00\x00\xff\xff\xba8" +
	"o\xaa"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x80de38a3c1d57e83,
		0x8390b923d29e3b12,
		0x8a1df0335afc249a,
		0x8eb96dceb6a99ebd,
		0xa3efa916dbb3213b,
		0xb0fd7286c7f13ef3,
		0xbe89922d1c49d9c5,
		0xcdcf42beb2537d20,
		0xd1ad5f4eadcdee8d,
		0xd377c9b486ad95d5,
		0xd929e054f82b286c,
		0xe1288479eb25823a,
		0xe54acc44b61fd7ef,
		0xe57b214e051e7d8e,
		0xe6df611247a8fc13,
		0xebdfb7b8e56a11f6,
		0xee93a663b2a23c03,
		0xf495a555c9344000,
		0xff6cce7fc87fa63c)
}
